// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletScanner.Data;

#nullable disable

namespace walletscanner.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241013013743_ChangeBalance")]
    partial class ChangeBalance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WalletScanner.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertId"));

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("AlertId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("WalletScanner.Models.DumpEvent", b =>
                {
                    b.Property<int>("DumpEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DumpEventId"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceDropPercent")
                        .HasPrecision(8, 6)
                        .HasColumnType("decimal(8,6)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<decimal>("VolumeSold")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("DumpEventId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("TokenId");

                    b.HasIndex("WalletId");

                    b.ToTable("DumpEvents");
                });

            modelBuilder.Entity("WalletScanner.Models.Network", b =>
                {
                    b.Property<int>("NetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetworkId"));

                    b.Property<string>("Explorer_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RPC_Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetworkId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("WalletScanner.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Decimals")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Liquidity")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<string>("LogoURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MarketCap")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<decimal?>("PriceChangePercent24h")
                        .HasPrecision(8, 6)
                        .HasColumnType("decimal(8,6)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Volume24hUSD")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.HasKey("TokenId");

                    b.HasIndex("NetworkId", "Address")
                        .IsUnique()
                        .HasFilter("[Address] IS NOT NULL");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("WalletScanner.Models.TokenMetric", b =>
                {
                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("CorrelationData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<string>("TopPerformingWallets")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TotalUsdValue")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.HasKey("TokenId");

                    b.HasIndex("NetworkId");

                    b.ToTable("TokenMetrics");
                });

            modelBuilder.Entity("WalletScanner.Models.TopTrader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<int?>("TradeBuyCount")
                        .HasColumnType("int");

                    b.Property<int?>("TradeCount")
                        .HasColumnType("int");

                    b.Property<int?>("TradeSellCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("VolumeBuy")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("VolumeSell")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.HasIndex("TokenId");

                    b.HasIndex("WalletId");

                    b.ToTable("TopTraders");
                });

            modelBuilder.Entity("WalletScanner.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<long?>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BlockTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromWalletId")
                        .HasColumnType("int");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToWalletId")
                        .HasColumnType("int");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValueUsd")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromWalletId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("ToWalletId");

                    b.HasIndex("TokenId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WalletScanner.Models.TrendingToken", b =>
                {
                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Volume24hUSD")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.HasKey("TokenId");

                    b.HasIndex("NetworkId");

                    b.ToTable("TrendingTokens");
                });

            modelBuilder.Entity("WalletScanner.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WalletScanner.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalUsdValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalletId");

                    b.HasIndex("NetworkId", "Address")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WalletScanner.Models.WalletHolding", b =>
                {
                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PriceUsd")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("UiAmount")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("ValueUsd")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.HasKey("WalletId", "TokenId");

                    b.HasIndex("TokenId");

                    b.ToTable("WalletHoldings");
                });

            modelBuilder.Entity("WalletScanner.Models.WalletMetric", b =>
                {
                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageHoldTime")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("CostBasis")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Profitability")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("TotalUsdValue")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<int?>("TradeFrequency")
                        .HasColumnType("int");

                    b.Property<decimal?>("TradeSizeAverage")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal?>("WinLossRatio")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.HasKey("WalletId");

                    b.ToTable("WalletMetrics");
                });

            modelBuilder.Entity("WalletScanner.Models.WhaleActivity", b =>
                {
                    b.Property<int>("WhaleActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhaleActivityId"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValueUsd")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("WhaleActivityId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("TokenId");

                    b.HasIndex("WalletId");

                    b.ToTable("WhaleActivities");
                });

            modelBuilder.Entity("WalletScanner.Models.Alert", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("Alerts")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("Alerts")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WalletScanner.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithMany("Alerts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Network");

                    b.Navigation("Token");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.DumpEvent", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("DumpEvents")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("DumpEvents")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Network");

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.Token", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("Tokens")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("WalletScanner.Models.TokenMetric", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("TokenMetrics")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithOne("TokenMetric")
                        .HasForeignKey("WalletScanner.Models.TokenMetric", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("WalletScanner.Models.TopTrader", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("TopTraders")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("TopTraders")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithMany("TopTraders")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.Transaction", b =>
                {
                    b.HasOne("WalletScanner.Models.Wallet", "FromWallet")
                        .WithMany("OutgoingTransactions")
                        .HasForeignKey("FromWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("Transactions")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "ToWallet")
                        .WithMany("IncomingTransactions")
                        .HasForeignKey("ToWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("Transactions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromWallet");

                    b.Navigation("Network");

                    b.Navigation("ToWallet");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("WalletScanner.Models.TrendingToken", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("TrendingTokens")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithOne("TrendingToken")
                        .HasForeignKey("WalletScanner.Models.TrendingToken", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("WalletScanner.Models.Wallet", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("Wallets")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("WalletScanner.Models.WalletHolding", b =>
                {
                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("WalletHoldings")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithMany("WalletHoldings")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.WalletMetric", b =>
                {
                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithOne("WalletMetric")
                        .HasForeignKey("WalletScanner.Models.WalletMetric", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.WhaleActivity", b =>
                {
                    b.HasOne("WalletScanner.Models.Network", "Network")
                        .WithMany("WhaleActivities")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Token", "Token")
                        .WithMany("WhaleActivities")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletScanner.Models.Wallet", "Wallet")
                        .WithMany("WhaleActivities")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletScanner.Models.Network", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("DumpEvents");

                    b.Navigation("TokenMetrics");

                    b.Navigation("Tokens");

                    b.Navigation("TopTraders");

                    b.Navigation("Transactions");

                    b.Navigation("TrendingTokens");

                    b.Navigation("Wallets");

                    b.Navigation("WhaleActivities");
                });

            modelBuilder.Entity("WalletScanner.Models.Token", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("DumpEvents");

                    b.Navigation("TokenMetric")
                        .IsRequired();

                    b.Navigation("TopTraders");

                    b.Navigation("Transactions");

                    b.Navigation("TrendingToken")
                        .IsRequired();

                    b.Navigation("WalletHoldings");

                    b.Navigation("WhaleActivities");
                });

            modelBuilder.Entity("WalletScanner.Models.User", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("WalletScanner.Models.Wallet", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("IncomingTransactions");

                    b.Navigation("OutgoingTransactions");

                    b.Navigation("TopTraders");

                    b.Navigation("WalletHoldings");

                    b.Navigation("WalletMetric")
                        .IsRequired();

                    b.Navigation("WhaleActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
